main = _{ SOI ~ fn_decl* ~ EOI }

fn_decl = {
    type_spec? ~
    lc_ident ~
    fn_param_idents ~
    "=" ~
    expression ~
    "."
}

fn_param_idents = {
    lc_ident*
}

type_spec = {
    ("[" ~ type_fn ~ "]") |
    ("[" ~ constraints_decl ~ "=>" ~ type_fn ~ "]")
}

constraints_decl = {
    constraint_decl ~ ("," ~ constraint_decl)*
}

constraint_decl = {
    uc_ident ~ lc_ident+
}

type_fn = {
    (type_single ~ !"->") |
    (type_single ~ "->" ~ type_fn)
}

type_single = _{
    ("(" ~ type_fn ~ ")") |
    (uc_ident | lc_ident)
}

var_type_spec = {
    ":" ~ type_single
}

assignment = {
    "let" ~ lc_ident ~ var_type_spec? ~ "=" ~ expression ~ ";" ~ expression
}

expression = {
    assignment |
    application |
    ("{" ~ expression ~ "}")
}

application = {
    part+
}

part = _{
    constant |
    lc_ident |
    "(" ~ expression ~ ")"
}

constant = _{
    dec_constant |
    hex_constant |
    bin_constant
}

dec_constant = @{ ("0" ~ !("x" | "b" | '0'..'9')) | ('1'..'9' ~ '0'..'9'*)}
hex_constant = @{ "0x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')+}
bin_constant = @{ "0b" ~ '0'..'1'+ }

uc_ident = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
lc_ident = @{ (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
