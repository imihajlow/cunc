main = _{ SOI ~ (fn_decl | type_def)* ~ EOI }

type_def = {
    "data" ~
    uc_ident ~
    type_def_param_idents ~
    "=" ~
    type_sum_spec ~
    "."
}

type_def_param_idents = {
    lc_ident*
}

type_sum_spec = {
    type_product_spec ~
    ("|" ~ type_product_spec)*
}

type_product_spec = {
    uc_ident ~ terminal_type*
}

fn_decl = {
    type_spec? ~
    !"data" ~
    lc_ident ~
    fn_param_idents ~
    "=" ~
    expression ~
    "."
}

fn_param_idents = {
    lc_ident*
}

type_spec = {
    ("[" ~ arrow_type ~ "]") |
    ("[" ~ constraints_decl ~ "=>" ~ arrow_type ~ "]")
}

constraints_decl = {
    constraint_decl ~ ("," ~ constraint_decl)*
}

constraint_decl = {
    uc_ident ~ lc_ident+
}

arrow_type = {
    application_type ~ ("->" ~ arrow_type)*
}

application_type = {
    terminal_type+
}

terminal_type = {
      ("(" ~ arrow_type ~ ")") |
      uc_ident |
      lc_ident
}

var_type_spec = {
    "::" ~ arrow_type
}

assignment = {
    "let" ~ lc_ident ~ var_type_spec? ~ "=" ~ expression ~ ";" ~ expression
}

expression = {
    assignment |
    application |
    ("{" ~ expression ~ "}")
}

application = {
    part+
}

part = _{
    constant |
    lc_ident |
    uc_ident |
    "(" ~ expression ~ ")"
}

constant = _{
    dec_constant |
    hex_constant |
    bin_constant
}

dec_constant = @{ ("0" ~ !("x" | "b" | '0'..'9')) | ('1'..'9' ~ '0'..'9'*)}
hex_constant = @{ "0x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')+}
bin_constant = @{ "0b" ~ '0'..'1'+ }

uc_ident = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
lc_ident = @{ (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
